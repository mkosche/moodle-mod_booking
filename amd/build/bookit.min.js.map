{"version":3,"file":"bookit.min.js","sources":["../src/bookit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     mod_booking/bookit\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\nimport {closeModal, closeInline} from 'mod_booking/bookingpage/prepageFooter';\n\nvar currentbookitpage = {};\nvar totalbookitpages = {};\n\nvar SELECTORS = {\n    MODALID: 'sbPrePageModal_',\n    INLINEID: 'sbPrePageInline_',\n    INMODALDIV: ' div.modalMainContent',\n    MODALHEADER: 'div.modalHeader',\n    MODALBUTTONAREA: 'div.modalButtonArea',\n    MODALFOOTER: 'div.modalFooter',\n    CONTINUEBUTTON: 'a.continue-button', // Don't want to find button right now.\n    BACKBUTTON: 'a.back-button', // Don't want to find button right now.\n    BOOKITBUTTON: 'div.booking-button-area.noprice',\n    INMODALBUTTON: 'div.in-modal-button',\n    STATICBACKDROP: 'div.modal-backdrop',\n};\n\n/**\n * Initializes the bookit button for the normal bookit function.\n * @param {integer} itemid\n * @param {string} area\n */\nexport const initbookitbutton = (itemid, area) => {\n\n    const initselector = SELECTORS.BOOKITBUTTON +\n    '[data-itemid]' +\n    '[data-area]';\n\n    if (!itemid || !area) {\n        const initbuttons = document.querySelectorAll(initselector);\n        initbuttons.forEach(button => {\n            const inititemid = button.dataset.itemid;\n            const initarea = button.dataset.area;\n            initbookitbutton(inititemid, initarea);\n        });\n        return;\n    }\n\n    const selector = SELECTORS.BOOKITBUTTON +\n    '[data-itemid=\"' + itemid + '\"]' +\n    '[data-area=\"' + area + '\"]';\n\n    const buttons = document.querySelectorAll(selector);\n\n    if (!buttons) {\n        return;\n    }\n\n    // We support more than one booking button on the same page.\n    buttons.forEach(button => {\n\n        if (button.dataset.nojs) {\n            return;\n        }\n\n        // We don't run code on disabled buttons.\n        if (button.classList.contains('disabled')) {\n            return;\n        }\n\n        if (!button.dataset.initialized) {\n            button.dataset.initialized = 'true';\n\n            const userid = button.dataset.userid;\n\n            button.addEventListener('click', (e) => {\n\n                // E.stopPropagation();\n\n                const data = button.dataset;\n\n                if (e.target.classList.contains('btn')) {\n                    bookit(itemid, area, userid, data);\n                }\n            });\n        }\n    });\n};\n\n/**\n * Gets called from mustache template.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {integer} totalnumberofpages\n * @param {string} uniquid\n */\nexport const initprepagemodal = (optionid, userid, totalnumberofpages, uniquid) => {\n\n    // eslint-disable-next-line no-console\n    console.log('initprepagemodal', optionid, userid, totalnumberofpages, uniquid);\n\n    if (!optionid || !uniquid || !totalnumberofpages) {\n\n        const elements = document.querySelectorAll(\"[id^=\" + SELECTORS.MODALID);\n\n        elements.forEach(element => {\n\n            optionid = element.dataset.optionid;\n            uniquid = element.dataset.uniquid;\n            userid = element.dataset.userid;\n            totalnumberofpages = element.dataset.pages;\n            if (optionid && uniquid) {\n                initprepagemodal(optionid, userid, totalnumberofpages, uniquid);\n            }\n        });\n        return;\n    }\n\n    currentbookitpage[optionid] = 0;\n    totalbookitpages[optionid] = totalnumberofpages;\n\n    // We need to get all prepage modals on this site. Make sure they are initialized.\n    respondToVisibility(optionid, userid, uniquid, totalnumberofpages, loadPreBookingPage);\n};\n\n/**\n * Gets called from mustache template.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {integer} totalnumberofpages\n * @param {string} uniquid\n */\nexport const initprepageinline = (optionid, userid, totalnumberofpages, uniquid) => {\n\n    // eslint-disable-next-line no-console\n    console.log('initprepageinline', optionid, userid, totalnumberofpages, uniquid);\n\n    if (!optionid || !uniquid || !totalnumberofpages) {\n\n        const elements = document.querySelectorAll(\"[id^=\" + SELECTORS.INLINEID);\n\n        // eslint-disable-next-line no-console\n        console.log(elements);\n\n        elements.forEach(element => {\n            optionid = element.dataset.optionid;\n            uniquid = element.dataset.uniquid;\n            userid = element.dataset.userid;\n            totalnumberofpages = element.dataset.pages;\n            if (optionid && uniquid) {\n                initprepageinline(optionid, userid, totalnumberofpages, uniquid);\n            }\n        });\n        return;\n    }\n\n    currentbookitpage[optionid] = 0;\n    totalbookitpages[optionid] = totalnumberofpages;\n\n    // Retrieve the right button.\n    const buttons = document.querySelectorAll(\n        '[data-itemid=\"' + optionid + '\"]' +\n        '[data-area=\"option\"]'\n    );\n\n    // Add the click listener to the button.\n\n    buttons.forEach(button => {\n\n        if (button.dataset.initialized) {\n            return;\n        }\n\n        button.dataset.initialized = true;\n\n        // eslint-disable-next-line no-console\n        console.log('add listener to button', button, button.dataset.action);\n\n        button.addEventListener('click', e => {\n\n            // Get the row element.\n            let rowcontainer = e.target.closest('.row');\n\n            const transferarea = !rowcontainer.lastElementChild.classList.contains('inlineprepagearea');\n            // We move the inlineprepagearea only if we need to.\n            if (transferarea) {\n                let inlinediv = returnVisibleElement(optionid, uniquid, SELECTORS.INMODALDIV);\n\n                rowcontainer.append(inlinediv.closest('.inlineprepagearea'));\n                // Inlinediv.remove();\n\n                // We need to get all prepage modals on this site. Make sure they are initialized.\n                loadPreBookingPage(optionid, userid, uniquid);\n            }\n        });\n    });\n};\n\n/**\n * React on visibility change.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {string} uniquid\n * @param {integer} totalnumberofpages\n * @param {function} callback\n */\nfunction respondToVisibility(optionid, userid, uniquid, totalnumberofpages, callback) {\n\n    let elements = document.querySelectorAll(\"[id^=\" + SELECTORS.MODALID + optionid + \"_\" + uniquid + \"]\");\n\n    elements.forEach(element => {\n\n        if (!element || element.dataset.initialized == 'true') {\n            return;\n        }\n\n        element.dataset.initialized = true;\n\n        var observer = new MutationObserver(function() {\n\n            if (!isHidden(element)) {\n\n                // Because of the modal animation, \"isHIdden\" is also true on hiding modal.\n                if (element.classList.contains('show')) {\n\n                    // Todo: Make sure it's not triggered on close.\n                    callback(optionid, userid, uniquid, totalnumberofpages);\n                }\n            }\n        });\n\n        // We look if we find a hidden parent. If not, we load right away.\n        while (element !== null) {\n            if (!isHidden(element)) {\n                element = element.parentElement;\n            } else {\n                if (element.dataset.observed) {\n                    return;\n                }\n\n                observer.observe(element, {attributes: true});\n                element.dataset.observed = true;\n                return;\n            }\n        }\n        callback(optionid, userid, uniquid, totalnumberofpages);\n    });\n}\n\n/**\n * Function to check visibility of element.\n * @param {*} el\n * @returns {boolean}\n */\nfunction isHidden(el) {\n    var style = window.getComputedStyle(el);\n    return ((style.display === 'none') || (style.visibility === 'hidden'));\n}\n\n/**\n * Loads the (next) pre booking page.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {string} uniquid\n */\nexport const loadPreBookingPage = (\n    optionid, userid = 0, uniquid = '') => {\n\n    const element = returnVisibleElement(optionid, uniquid, SELECTORS.INMODALDIV);\n\n    if (element) {\n        while (element.firstChild) {\n            element.removeChild(element.firstChild);\n        }\n    } else {\n        // eslint-disable-next-line no-console\n        console.error('didnt find element');\n    }\n\n    Ajax.call([{\n        methodname: \"mod_booking_allow_add_item_to_cart\",\n        args: {\n            'itemid': optionid,\n            'userid': userid,\n        },\n        done: function(response) {\n            // Will always be 1, if shopping cart is not installed!\n            if (response.success == 1) {\n                Ajax.call([{\n                    methodname: \"mod_booking_load_pre_booking_page\",\n                    args: {\n                        optionid,\n                        userid,\n                        'pagenumber': currentbookitpage[optionid],\n                    },\n                    done: function(res) {\n                        // If we are on the last page, we reset it to 0.\n                        if (currentbookitpage[optionid] === totalbookitpages[optionid] - 1) {\n                            currentbookitpage[optionid] = 0;\n                        }\n\n                        const jsonobject = JSON.parse(res.json);\n\n                        // We support more than one template, they will be seperated by comma.\n                        // We have a data key in the json\n                        const templates = res.template.split(',');\n                        let dataarray = jsonobject;\n                        // Const buttontype = res.buttontype;\n\n                        renderTemplatesOnPage(templates, dataarray, element);\n                    },\n                    fail: function(err) {\n                        // eslint-disable-next-line no-console\n                        console.log(err);\n                    }\n                }]);\n            } else {\n\n                closeModal(optionid, false);\n                closeInline(optionid, false);\n\n                // Make sure that the prepage modal is actually closed.\n\n                import('local_shopping_cart/cart')\n                    // eslint-disable-next-line promise/always-return\n                    .then(shoppingcart => {\n                        const addItemShowNotification = shoppingcart.addItemShowNotification;\n                        // Now you can use the specific function\n                        response.userid = userid;\n                        addItemShowNotification(response);\n                    })\n                    .catch(err => {\n                        // Handle any errors, including if the module doesn't exist\n                        // eslint-disable-next-line no-console\n                        console.log(err);\n                });\n            }\n\n            return true;\n        },\n        fail: function(err) {\n            // eslint-disable-next-line no-console\n            console.log(err);\n        }\n    }]);\n};\n\n/**\n *\n * @param {string} templates\n * @param {object} dataarray\n * @param {HTMLElement} element\n */\nasync function renderTemplatesOnPage(templates, dataarray, element) {\n\n    const modal = element.closest('.prepage-body');\n\n    // We need to pass the id of our element to the templates to render.\n    // If not, we might select the wrong modal or collapsible.\n    let elementid = modal.id;\n\n    if (!elementid) {\n        const parent = modal.closest('[id]');\n        elementid = parent.id;\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(modal, elementid);\n\n    modal.querySelector(SELECTORS.MODALHEADER).innerHTML = '';\n    modal.querySelector(SELECTORS.INMODALDIV).innerHTML = '';\n    modal.querySelector(SELECTORS.MODALBUTTONAREA).innerHTML = '';\n    modal.querySelector(SELECTORS.MODALFOOTER).innerHTML = '';\n\n    templates.forEach(async template => {\n\n        const data = dataarray.shift();\n\n        let targetelement = element;\n\n        if (!data) {\n            return true;\n        }\n\n        data.data.elementid = elementid;\n\n        switch (template) {\n            case 'mod_booking/bookingpage/header':\n                targetelement = modal.querySelector(SELECTORS.MODALHEADER);\n                break;\n            case 'mod_booking/bookit_button':\n            case 'mod_booking/bookit_price':\n                targetelement = modal.querySelector(SELECTORS.MODALBUTTONAREA);\n                break;\n            case 'mod_booking/bookingpage/footer':\n                targetelement = modal.querySelector(SELECTORS.MODALFOOTER);\n                break;\n            default:\n                targetelement = modal.querySelector(SELECTORS.INMODALDIV);\n                break;\n        }\n\n        // eslint-disable-next-line no-console\n        console.log(data.data);\n\n        await Templates.renderForPromise(template, data.data).then(({html, js}) => {\n\n            Templates.replaceNodeContents(targetelement, html, js);\n\n            return true;\n        }).catch(ex => {\n            Notification.addNotification({\n                message: 'failed rendering ' + JSON.stringify(ex),\n                type: \"danger\"\n            });\n        });\n        return true;\n    });\n    return true;\n}\n\n/**\n *\n * @param {int} itemid\n * @param {string} area\n * @param {int} userid\n * @param {object} data\n */\nfunction bookit(itemid, area, userid, data) {\n\n    Ajax.call([{\n        methodname: \"mod_booking_bookit\",\n        args: {\n            'itemid': itemid,\n            'area': area,\n            'userid': userid,\n            'data': JSON.stringify(data),\n        },\n        done: function(res) {\n\n            if (document.querySelector('.booking-elective-component')) {\n                window.location.reload();\n            }\n\n            const jsonarray = JSON.parse(res.json);\n\n            // We might have more than one template to render.\n            const templates = res.template.split(',');\n\n            // There might be more than one button area.\n            const buttons = document.querySelectorAll(SELECTORS.BOOKITBUTTON +\n                '[data-itemid=\\'' + itemid + '\\']' +\n                '[data-area=\\'' + area + '\\']');\n\n            const promises = [];\n\n            // We run through every button. and render the data.\n            buttons.forEach(button => {\n\n                // For every button, we need a new jsonarray.\n                const arraytoreduce = [...jsonarray];\n\n                templates.forEach(template => {\n\n                    const data = arraytoreduce.shift();\n\n                    const datatorender = data.data ?? data;\n\n                    const promise = Templates.renderForPromise(template, datatorender).then(({html, js}) => {\n\n                        Templates.replaceNode(button, html, js);\n\n                        return true;\n                    }).catch(ex => {\n                        Notification.addNotification({\n                            message: 'failed rendering ' + ex,\n                            type: \"danger\"\n                        });\n                    });\n\n                    promises.push(promise);\n                });\n            });\n\n            Promise.all(promises).then(() => {\n\n                const backdrop = document.querySelector(SELECTORS.STATICBACKDROP);\n\n                if (!backdrop) {\n                    reloadAllTables();\n                }\n\n                // The actions on successful booking are executed elsewhere.\n                return true;\n            }).catch(e => {\n                // eslint-disable-next-line no-console\n                console.log(e);\n            });\n        }\n    }]);\n}\n\n/**\n * We want to find out the visible modal\n * @param {integer} optionid\n * @param {string} uniquid\n * @param {string} appendedSelector\n * @returns {HTMLElement}\n */\nfunction returnVisibleElement(optionid, uniquid, appendedSelector) {\n\n    // First, we get all the possbile Elements (we don't now the unique id appended to the element.)\n    let selector = '[id^=\"' + SELECTORS.MODALID + optionid + '_' + uniquid + '\"] ' + appendedSelector;\n    if (!uniquid || uniquid.length === 0) {\n        selector = '[id^=\"' + SELECTORS.MODALID + optionid + '_\"].show ' + appendedSelector;\n    }\n\n    let elements = document.querySelectorAll(selector);\n\n    // If the nodelist is empty, we we mgiht use inline.\n    // If so, we need to have a different way of selecting elements.\n    if (elements.length === 0) {\n\n        selector = '[id^=\"' + SELECTORS.INLINEID + optionid + '_\"] ' + appendedSelector;\n        elements = document.querySelectorAll(selector);\n\n    }\n\n    let visibleElement = null;\n\n    elements.forEach(element => {\n\n        var elementtocheck = element.parentElement.parentElement;\n\n        // We look if we find a hidden parent. If not, we load right away.\n        while (elementtocheck !== null) {\n            if (!isHidden(elementtocheck)) {\n                elementtocheck = elementtocheck.parentElement;\n\n            } else {\n\n                break;\n            }\n        }\n        // If after the while, we have still an element, it's hidden.\n        // So we only apply visible if it's null.\n        if (!elementtocheck) {\n            visibleElement = element;\n        }\n    });\n\n    return visibleElement;\n}\n\n/**\n * Load next prepage booking page.\n * @param {int} optionid\n * @param {int} userid\n */\nexport function continueToNextPage(optionid, userid) {\n    if (currentbookitpage[optionid] < totalbookitpages[optionid]) {\n        currentbookitpage[optionid]++;\n        loadPreBookingPage(optionid, userid);\n    }\n}\n\n/**\n *  Load previous prepage booking page.\n * @param {int} optionid\n * @param {int} userid\n */\nexport function backToPreviousPage(optionid, userid) {\n\n    currentbookitpage[optionid]--;\n\n    loadPreBookingPage(optionid, userid);\n}\n\n/**\n *  Set back variables used in modal.\n *  @param {int} optionid\n */\nexport function setBackModalVariables(optionid) {\n\n    currentbookitpage[optionid] = 0;\n}\n"],"names":["optionid","userid","currentbookitpage","loadPreBookingPage","totalbookitpages","SELECTORS","initbookitbutton","itemid","area","initselector","document","querySelectorAll","forEach","button","inititemid","dataset","initarea","selector","buttons","nojs","classList","contains","initialized","addEventListener","e","data","target","call","methodname","args","JSON","stringify","done","res","querySelector","window","location","reload","jsonarray","parse","json","templates","template","split","promises","arraytoreduce","shift","datatorender","promise","Templates","renderForPromise","then","_ref2","html","js","replaceNode","catch","ex","addNotification","message","type","push","Promise","all","console","log","bookit","initprepagemodal","totalnumberofpages","uniquid","callback","element","observer","MutationObserver","isHidden","observed","observe","attributes","parentElement","respondToVisibility","pages","initprepageinline","elements","action","rowcontainer","closest","lastElementChild","inlinediv","returnVisibleElement","append","el","style","getComputedStyle","display","visibility","firstChild","removeChild","error","response","success","jsonobject","renderTemplatesOnPage","fail","err","shoppingcart","addItemShowNotification","dataarray","modal","elementid","id","parent","innerHTML","async","targetelement","_ref","replaceNodeContents","appendedSelector","length","visibleElement","elementtocheck"],"mappings":"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"}